{"version":3,"mappings":"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","names":["LLMConfigurationPanel","React","lazy","__vitePreload","import","then","default","module","App","state","setState","useState","urlState","urlStateManager","loadStateFromURL","prompts","map","content","index","id","createdAt","Date","now","updatedAt","responses","config","ui","DEFAULT_UI_STATE","Object","fromEntries","entries","filter","value","isLoading","error","showSettings","setShowSettings","theme","resolvedTheme","toggleTheme","initialTheme","onThemeChange","setThemeState","systemTheme","setSystemTheme","useEffect","mediaQuery","window","matchMedia","updateSystemTheme","matches","addEventListener","removeEventListener","root","document","documentElement","classList","remove","add","setAttribute","setTheme","useCallback","newTheme","useTheme","updateUIState","llmProviderManager","registerProvider","openaiProvider","anthropicProvider","geminiProvider","cancelAllRequests","providers","provider","apiKey","storageService","getAPIKey","DEFAULT_PROVIDER_CONFIGS","validation","validateConfig","success","prev","data","clearAPIKey","length","p","c","trim","model","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemMessage","saveStateToURL","addPrompt","title","newPrompt","Math","random","toString","substr","updatePrompt","prompt","removePrompt","response","promptId","clearPrompts","setConfig","saveAPIKey","updates","setError","clearResponses","sendSinglePrompt","async","find","r","requestResult","createRequest","Error","message","request","fullContent","chunk","sendStreamingRequest","existingIndex","findIndex","requestId","isComplete","isStreaming","metadata","tokenCount","timestamp","newResponses","errorResponse","code","retryable","sendPrompts","promises","promptsWithContent","Promise","allSettled","useMemo","contextValue","actions","className","children","jsxs","jsx","jsxRuntimeExports","SimpleThemeToggle","onToggle","Button","onClick","variant","size","Settings","Alert","AlertDescription","Badge","disabled","PromptGrid","onPromptChange","onPromptRemove","onPromptAdd","onSendSinglePrompt","uiState","Dialog","open","onOpenChange","DialogContent","DialogHeader","DialogTitle","DialogDescription","Suspense","fallback","onConfigChange","ReactDOM","createRoot","getElementById","render","StrictMode"],"sources":["../../src/App.tsx","../../src/hooks/useTheme.ts","../../src/main.tsx"],"sourcesContent":["// src/App.tsx\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Settings } from 'lucide-react';\nimport type {\n  AppState,\n  PromptItem,\n  ResponseItem\n} from '@/types/app';\nimport type { LLMProvider, LLMConfig } from '@/types/llm';\nimport { DEFAULT_UI_STATE, type UIState } from '@/types/url-state';\nimport { DEFAULT_PROVIDER_CONFIGS } from '@/types/llm';\nimport { storageService } from '@/services/storage';\nimport { urlStateManager } from '@/services/url-state';\nimport { llmProviderManager } from '@/services/llm';\nimport { openaiProvider, anthropicProvider, geminiProvider } from '@/services/llm/providers';\nimport { PromptGrid } from '@/components/layout';\nimport { SimpleThemeToggle } from '@/components/ui';\n// Lazy load settings panel since it's only shown when needed\nconst LLMConfigurationPanel = React.lazy(() =>\n  import('@/components/settings').then(module => ({ default: module.LLMConfigurationPanel }))\n);\nimport { useTheme } from '@/hooks/useTheme';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\n/**\n * Main application component with comprehensive state management\n */\nconst App: React.FC = () => {\n  // Initialize state\n  const [state, setState] = useState<AppState>(() => {\n    // Try to load state from URL first\n    const urlState = urlStateManager.loadStateFromURL();\n    \n    return {\n      prompts: urlState?.prompts.map((content, index) => ({\n        id: `prompt-${index}`,\n        content,\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n      })) || [\n        {\n          id: 'prompt-1',\n          content: '',\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'prompt-2',\n          content: '',\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n      ],\n      responses: [],\n      config: null,\n      ui: {\n        ...DEFAULT_UI_STATE,\n        ...(urlState?.ui && Object.fromEntries(\n          Object.entries(urlState.ui).filter(([, value]) => value !== undefined)\n        ))\n      },\n      isLoading: false,\n      error: null,\n    };\n  });\n\n  // Settings panel state\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Theme management\n  const { theme, resolvedTheme, toggleTheme } = useTheme(\n    state.ui.theme,\n    (newTheme) => {\n      updateUIState({ theme: newTheme });\n    }\n  );\n\n  // Register LLM providers on mount\n  useEffect(() => {\n    llmProviderManager.registerProvider(openaiProvider);\n    llmProviderManager.registerProvider(anthropicProvider);\n    llmProviderManager.registerProvider(geminiProvider);\n\n    return () => {\n      // Cleanup on unmount\n      llmProviderManager.cancelAllRequests();\n    };\n  }, []);\n\n  // Load configuration from storage on mount\n  useEffect(() => {\n    const loadConfig = () => {\n      // Try to get stored API keys and create config\n      const providers: LLMProvider[] = ['openai', 'anthropic', 'gemini'];\n      \n      for (const provider of providers) {\n        const apiKey = storageService.getAPIKey(provider);\n        if (apiKey) {\n          const defaultConfig = DEFAULT_PROVIDER_CONFIGS[provider];\n          const config: LLMConfig = {\n            ...defaultConfig,\n            apiKey,\n          };\n          \n          // Validate the configuration before setting it\n          const validation = llmProviderManager.validateConfig(provider, config);\n          if (validation.success) {\n            setState(prev => ({ ...prev, config: validation.data }));\n            break; // Use the first available provider\n          } else {\n            console.warn(`Invalid configuration for ${provider}:`, validation.error.message);\n            // Clear the invalid API key\n            storageService.clearAPIKey(provider);\n          }\n        }\n      }\n    };\n\n    loadConfig();\n  }, []);\n\n  // Save state to URL when relevant parts change\n  useEffect(() => {\n    if (state.prompts.length > 0 || state.config) {\n      const urlState = {\n        prompts: state.prompts.map(p => p.content).filter(c => c.trim().length > 0),\n        config: state.config ? {\n          provider: state.config.provider,\n          model: state.config.model,\n          temperature: state.config.temperature,\n          maxTokens: state.config.maxTokens,\n          topP: state.config.topP,\n          frequencyPenalty: state.config.frequencyPenalty,\n          presencePenalty: state.config.presencePenalty,\n          systemMessage: state.config.systemMessage,\n        } : {},\n        ui: state.ui,\n      };\n      \n      urlStateManager.saveStateToURL(urlState);\n    }\n  }, [state.prompts, state.config, state.ui]);\n\n  // Action handlers\n  const addPrompt = useCallback((content: string = '', title?: string) => {\n    const newPrompt: PromptItem = {\n      id: `prompt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      content,\n      ...(title !== undefined && { title }),\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n    };\n\n    setState(prev => ({\n      ...prev,\n      prompts: [...prev.prompts, newPrompt],\n    }));\n  }, []);\n\n  const updatePrompt = useCallback((id: string, content: string, title?: string) => {\n    setState(prev => ({\n      ...prev,\n      prompts: prev.prompts.map(prompt =>\n        prompt.id === id\n          ? {\n              ...prompt,\n              content,\n              ...(title !== undefined && { title }),\n              updatedAt: Date.now()\n            }\n          : prompt\n      ),\n    }));\n  }, []);\n\n  const removePrompt = useCallback((id: string) => {\n    setState(prev => ({\n      ...prev,\n      prompts: prev.prompts.filter(prompt => prompt.id !== id),\n      responses: prev.responses.filter(response => response.promptId !== id),\n    }));\n  }, []);\n\n  const clearPrompts = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      prompts: [],\n      responses: [],\n    }));\n  }, []);\n\n  const setConfig = useCallback((config: LLMConfig) => {\n    setState(prev => ({ ...prev, config }));\n    \n    // Save API key to storage\n    storageService.saveAPIKey(config.provider, config.apiKey);\n  }, []);\n\n  const updateUIState = useCallback((updates: Partial<UIState>) => {\n    setState(prev => ({\n      ...prev,\n      ui: { ...prev.ui, ...updates },\n    }));\n  }, []);\n\n  const setError = useCallback((error: string | null) => {\n    setState(prev => ({ ...prev, error }));\n  }, []);\n\n  const clearResponses = useCallback(() => {\n    setState(prev => ({ ...prev, responses: [] }));\n  }, []);\n\n  const sendSinglePrompt = useCallback(async (promptId: string) => {\n    if (!state.config) {\n      setError('No LLM configuration available');\n      return;\n    }\n\n    const prompt = state.prompts.find(p => p.id === promptId);\n    if (!prompt || !prompt.content.trim()) {\n      return;\n    }\n\n    // Clear existing response for this prompt\n    setState(prev => ({\n      ...prev,\n      responses: prev.responses.filter(r => r.promptId !== promptId),\n      error: null\n    }));\n\n    try {\n      const requestResult = llmProviderManager.createRequest(\n        prompt.content,\n        state.config!\n      );\n\n      if (!requestResult.success) {\n        throw new Error(`Invalid request: ${requestResult.error.message}`);\n      }\n\n      const request = requestResult.data;\n      let fullContent = '';\n\n      try {\n        for await (const chunk of llmProviderManager.sendStreamingRequest(request)) {\n          if (chunk.content) {\n            fullContent += chunk.content;\n            \n            // Update response in real-time\n            setState(prev => {\n              const existingIndex = prev.responses.findIndex(r => r.promptId === prompt.id);\n              const response: ResponseItem = {\n                id: `response-${prompt.id}`,\n                promptId: prompt.id,\n                response: {\n                  requestId: request.id,\n                  content: fullContent,\n                  isComplete: chunk.isComplete,\n                  isStreaming: !chunk.isComplete,\n                  metadata: {\n                    ...(chunk.tokenCount !== undefined && { tokenCount: chunk.tokenCount }),\n                    model: state.config!.model,\n                    provider: state.config!.provider,\n                    timestamp: Date.now(),\n                  },\n                },\n                createdAt: Date.now(),\n              };\n\n              if (existingIndex >= 0) {\n                const newResponses = [...prev.responses];\n                newResponses[existingIndex] = response;\n                return { ...prev, responses: newResponses };\n              } else {\n                return { ...prev, responses: [...prev.responses, response] };\n              }\n            });\n          }\n\n          if (chunk.isComplete) {\n            break;\n          }\n        }\n      } catch (error) {\n        console.error(`Error streaming response for prompt ${prompt.id}:`, error);\n        \n        // Add error response\n        const errorResponse: ResponseItem = {\n          id: `response-${prompt.id}`,\n          promptId: prompt.id,\n          response: {\n            requestId: request.id,\n            content: '',\n            isComplete: true,\n            isStreaming: false,\n            error: {\n              code: 'STREAMING_ERROR',\n              message: error instanceof Error ? error.message : 'Unknown streaming error',\n              retryable: true,\n            },\n            metadata: {\n              model: state.config!.model,\n              provider: state.config!.provider,\n              timestamp: Date.now(),\n            },\n          },\n          createdAt: Date.now(),\n        };\n\n        setState(prev => {\n          const existingIndex = prev.responses.findIndex(r => r.promptId === prompt.id);\n          if (existingIndex >= 0) {\n            const newResponses = [...prev.responses];\n            newResponses[existingIndex] = errorResponse;\n            return { ...prev, responses: newResponses };\n          } else {\n            return { ...prev, responses: [...prev.responses, errorResponse] };\n          }\n        });\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\n    }\n  }, [state.config, state.prompts, setError]);\n\n  const sendPrompts = useCallback(async () => {\n    if (!state.config) {\n      setError('No LLM configuration available');\n      return;\n    }\n\n    if (state.prompts.length === 0) {\n      setError('No prompts to send');\n      return;\n    }\n\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n    clearResponses();\n\n    try {\n      // Send all prompts concurrently\n      const promises = promptsWithContent\n        .map(async (prompt) => {\n          const requestResult = llmProviderManager.createRequest(\n            prompt.content,\n            state.config!\n          );\n\n          if (!requestResult.success) {\n            throw new Error(`Invalid request: ${requestResult.error.message}`);\n          }\n\n          const request = requestResult.data;\n          let fullContent = '';\n\n          try {\n            for await (const chunk of llmProviderManager.sendStreamingRequest(request)) {\n              if (chunk.content) {\n                fullContent += chunk.content;\n                \n                // Update response in real-time\n                setState(prev => {\n                  const existingIndex = prev.responses.findIndex(r => r.promptId === prompt.id);\n                  const response: ResponseItem = {\n                    id: `response-${prompt.id}`,\n                    promptId: prompt.id,\n                    response: {\n                      requestId: request.id,\n                      content: fullContent,\n                      isComplete: chunk.isComplete,\n                      isStreaming: !chunk.isComplete,\n                      metadata: {\n                        ...(chunk.tokenCount !== undefined && { tokenCount: chunk.tokenCount }),\n                        model: state.config!.model,\n                        provider: state.config!.provider,\n                        timestamp: Date.now(),\n                      },\n                    },\n                    createdAt: Date.now(),\n                  };\n\n                  if (existingIndex >= 0) {\n                    const newResponses = [...prev.responses];\n                    newResponses[existingIndex] = response;\n                    return { ...prev, responses: newResponses };\n                  } else {\n                    return { ...prev, responses: [...prev.responses, response] };\n                  }\n                });\n              }\n\n              if (chunk.isComplete) {\n                break;\n              }\n            }\n          } catch (error) {\n            console.error(`Error streaming response for prompt ${prompt.id}:`, error);\n            \n            // Add error response\n            const errorResponse: ResponseItem = {\n              id: `response-${prompt.id}`,\n              promptId: prompt.id,\n              response: {\n                requestId: request.id,\n                content: '',\n                isComplete: true,\n                isStreaming: false,\n                error: {\n                  code: 'STREAMING_ERROR',\n                  message: error instanceof Error ? error.message : 'Unknown streaming error',\n                  retryable: true,\n                },\n                metadata: {\n                  model: state.config!.model,\n                  provider: state.config!.provider,\n                  timestamp: Date.now(),\n                },\n              },\n              createdAt: Date.now(),\n            };\n\n            setState(prev => {\n              const existingIndex = prev.responses.findIndex(r => r.promptId === prompt.id);\n              if (existingIndex >= 0) {\n                const newResponses = [...prev.responses];\n                newResponses[existingIndex] = errorResponse;\n                return { ...prev, responses: newResponses };\n              } else {\n                return { ...prev, responses: [...prev.responses, errorResponse] };\n              }\n            });\n          }\n        });\n\n      await Promise.allSettled(promises);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, [state.config, state.prompts, setError, clearResponses]);\n\n  // Memoized expensive computations\n  const promptsWithContent = useMemo(() =>\n    state.prompts.filter(p => p.content.trim().length > 0),\n    [state.prompts]\n  );\n\n\n  // Memoized context value\n  const contextValue = useMemo(() => ({\n    ...state,\n    actions: {\n      addPrompt,\n      updatePrompt,\n      removePrompt,\n      clearPrompts,\n      setConfig,\n      updateUIState,\n      sendPrompts,\n      sendSinglePrompt,\n      clearResponses,\n      setError,\n    },\n  }), [\n    state,\n    addPrompt,\n    updatePrompt,\n    removePrompt,\n    clearPrompts,\n    setConfig,\n    updateUIState,\n    sendPrompts,\n    sendSinglePrompt,\n    clearResponses,\n    setError,\n  ]);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"w-full px-2 py-2\">\n        <header className=\"mb-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-4xl font-bold\">\n                Juxtaprompt\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <SimpleThemeToggle\n                theme={theme}\n                resolvedTheme={resolvedTheme}\n                onToggle={toggleTheme}\n              />\n              <Button\n                onClick={() => setShowSettings(true)}\n                variant=\"ghost\"\n                size=\"icon\"\n                title=\"Open settings\"\n                aria-label=\"Open settings\"\n              >\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n          <p className=\"text-muted-foreground text-center text-sm\">\n            Professional prompt comparison tool with real-time streaming responses\n          </p>\n        </header>\n\n        <main>\n          {/* Configuration Notice */}\n          {!contextValue.config && (\n            <Alert className=\"mb-6\">\n              <div className=\"text-yellow-600\">⚠️</div>\n              <AlertDescription>\n                <h3 className=\"font-medium mb-1\">\n                  Configuration Required\n                </h3>\n                <p className=\"text-sm\">\n                  Please configure an LLM provider to start comparing prompts.\n                  Add your API key in the settings panel.\n                </p>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Error Display */}\n          {contextValue.error && (\n            <Alert variant=\"destructive\" className=\"mb-6\">\n              <div className=\"text-destructive\">❌</div>\n              <AlertDescription>\n                <h3 className=\"font-medium mb-1\">Error</h3>\n                <p className=\"text-sm\">{contextValue.error}</p>\n                <Button\n                  onClick={() => setError(null)}\n                  variant=\"link\"\n                  size=\"sm\"\n                  className=\"mt-2 h-auto p-0 text-xs text-destructive hover:underline\"\n                >\n                  Dismiss\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Main Content */}\n          <div className=\"space-y-6\">\n            {/* Action Bar */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {contextValue.prompts.length} prompt{contextValue.prompts.length !== 1 ? 's' : ''} •\n                  {contextValue.responses.length} response{contextValue.responses.length !== 1 ? 's' : ''}\n                </div>\n                {contextValue.config && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {contextValue.config.provider} • {contextValue.config.model}\n                  </Badge>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                {promptsWithContent.length > 0 && contextValue.config && (\n                  <Button\n                    onClick={sendPrompts}\n                    disabled={contextValue.isLoading}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    {contextValue.isLoading ? 'Sending...' : 'Send All Prompts'}\n                  </Button>\n                )}\n                \n                {contextValue.responses.length > 0 && (\n                  <Button\n                    onClick={clearResponses}\n                    disabled={contextValue.isLoading}\n                    variant=\"secondary\"\n                  >\n                    Clear Responses\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Prompt Grid */}\n            <PromptGrid\n              prompts={contextValue.prompts}\n              responses={contextValue.responses}\n              onPromptChange={updatePrompt}\n              onPromptRemove={removePrompt}\n              onPromptAdd={addPrompt}\n              onSendSinglePrompt={sendSinglePrompt}\n              isLoading={contextValue.isLoading}\n              config={contextValue.config}\n              uiState={contextValue.ui}\n            />\n          </div>\n        </main>\n\n        {/* Settings Modal */}\n        <Dialog open={showSettings} onOpenChange={setShowSettings}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Settings</DialogTitle>\n              <DialogDescription>\n                Configure your application preferences including theme and LLM settings.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-medium mb-4\">Theme</h3>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Choose your preferred theme\n                  </span>\n                  <SimpleThemeToggle\n                    theme={theme}\n                    resolvedTheme={resolvedTheme}\n                    onToggle={toggleTheme}\n                  />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium mb-4\">LLM Configuration</h3>\n                <React.Suspense fallback={<div className=\"flex items-center justify-center p-8\"><div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div></div>}>\n                  <LLMConfigurationPanel\n                    config={contextValue.config}\n                    onConfigChange={setConfig}\n                  />\n                </React.Suspense>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// src/hooks/useTheme.ts\nimport { useEffect, useState, useCallback } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface UseThemeReturn {\n  theme: Theme;\n  resolvedTheme: 'light' | 'dark';\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\n/**\n * Custom hook for managing theme state with system preference detection\n */\nexport const useTheme = (\n  initialTheme: Theme = 'system',\n  onThemeChange?: (theme: Theme) => void\n): UseThemeReturn => {\n  const [theme, setThemeState] = useState<Theme>(initialTheme);\n  const [systemTheme, setSystemTheme] = useState<'light' | 'dark'>('light');\n\n  // Detect system theme preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const updateSystemTheme = () => {\n      setSystemTheme(mediaQuery.matches ? 'dark' : 'light');\n    };\n\n    // Set initial system theme\n    updateSystemTheme();\n\n    // Listen for changes\n    mediaQuery.addEventListener('change', updateSystemTheme);\n\n    return () => {\n      mediaQuery.removeEventListener('change', updateSystemTheme);\n    };\n  }, []);\n\n  // Calculate resolved theme (what should actually be applied)\n  const resolvedTheme: 'light' | 'dark' = theme === 'system' ? systemTheme : theme;\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Add the resolved theme class\n    root.classList.add(resolvedTheme);\n    \n    // Also set data attribute for CSS targeting\n    root.setAttribute('data-theme', resolvedTheme);\n  }, [resolvedTheme]);\n\n  // Set theme with callback\n  const setTheme = useCallback((newTheme: Theme) => {\n    setThemeState(newTheme);\n    onThemeChange?.(newTheme);\n  }, [onThemeChange]);\n\n  // Toggle between light and dark (ignoring system)\n  const toggleTheme = useCallback(() => {\n    if (theme === 'system') {\n      // If currently system, toggle to opposite of current system preference\n      setTheme(systemTheme === 'dark' ? 'light' : 'dark');\n    } else {\n      // Toggle between light and dark\n      setTheme(theme === 'light' ? 'dark' : 'light');\n    }\n  }, [theme, systemTheme, setTheme]);\n\n  return {\n    theme,\n    resolvedTheme,\n    setTheme,\n    toggleTheme,\n  };\n};","// src/main.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);"],"file":"assets/index-c3138a2a.js"}