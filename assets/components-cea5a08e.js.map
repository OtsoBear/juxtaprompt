{"version":3,"file":"components-cea5a08e.js","sources":["../../src/types/llm.ts","../../src/components/layout/PromptGrid.tsx","../../src/types/storage.ts","../../src/components/settings/StorageSecuritySelector.tsx","../../src/components/settings/LLMConfigurationPanel.tsx"],"sourcesContent":["// src/types/llm.ts\nexport const LLM_PROVIDERS = ['openai', 'anthropic', 'gemini'] as const;\nexport type LLMProvider = typeof LLM_PROVIDERS[number];\n\nexport interface LLMConfig {\n  readonly provider: LLMProvider;\n  readonly apiKey: string;\n  readonly baseUrl: string;\n  readonly model: string;\n  readonly temperature: number;\n  readonly maxTokens: number;\n  readonly topP: number;\n  readonly frequencyPenalty: number;\n  readonly presencePenalty: number;\n  readonly systemMessage: string;\n}\n\nexport interface LLMRequest {\n  readonly id: string;\n  readonly prompt: string;\n  readonly config: LLMConfig;\n  readonly timestamp: number;\n}\n\nexport interface LLMStreamChunk {\n  readonly requestId: string;\n  readonly content: string;\n  readonly isComplete: boolean;\n  readonly tokenCount?: number;\n}\n\nexport interface ResponseMetadata {\n  readonly tokenCount?: number;\n  readonly model: string;\n  readonly provider: LLMProvider;\n  readonly timestamp: number;\n  readonly duration?: number;\n}\n\nexport interface LLMError {\n  readonly code: string;\n  readonly message: string;\n  readonly retryable: boolean;\n  readonly statusCode?: number;\n  readonly details?: unknown;\n}\n\nexport interface LLMResponse {\n  readonly requestId: string;\n  readonly content: string;\n  readonly isComplete: boolean;\n  readonly isStreaming: boolean;\n  readonly error?: LLMError;\n  readonly metadata: ResponseMetadata;\n}\n\n// Provider-specific model configurations\nexport const PROVIDER_MODELS: Record<LLMProvider, ReadonlyArray<string>> = {\n  openai: [\n    'gpt-4o',\n    'gpt-4o-mini',\n    'gpt-4-turbo',\n    'gpt-4',\n    'gpt-3.5-turbo',\n  ],\n  anthropic: [\n    'claude-3-5-sonnet-20241022',\n    'claude-3-5-haiku-20241022',\n    'claude-3-opus-20240229',\n    'claude-3-sonnet-20240229',\n    'claude-3-haiku-20240307',\n  ],\n  gemini: [\n    'gemini-1.5-pro',\n    'gemini-1.5-flash',\n    'gemini-1.0-pro',\n  ],\n} as const;\n\n// Default configurations for each provider\nexport const DEFAULT_PROVIDER_CONFIGS: Record<LLMProvider, Omit<LLMConfig, 'apiKey'>> = {\n  openai: {\n    provider: 'openai',\n    baseUrl: 'https://api.openai.com/v1',\n    model: 'gpt-4o-mini',\n    temperature: 0.7,\n    maxTokens: 2048,\n    topP: 1.0,\n    frequencyPenalty: 0.0,\n    presencePenalty: 0.0,\n    systemMessage: '',\n  },\n  anthropic: {\n    provider: 'anthropic',\n    baseUrl: 'https://api.anthropic.com',\n    model: 'claude-3-5-sonnet-20241022',\n    temperature: 0.7,\n    maxTokens: 2048,\n    topP: 1.0,\n    frequencyPenalty: 0.0,\n    presencePenalty: 0.0,\n    systemMessage: '',\n  },\n  gemini: {\n    provider: 'gemini',\n    baseUrl: 'https://generativelanguage.googleapis.com/v1beta',\n    model: 'gemini-1.5-flash',\n    temperature: 0.7,\n    maxTokens: 2048,\n    topP: 1.0,\n    frequencyPenalty: 0.0,\n    presencePenalty: 0.0,\n    systemMessage: '',\n  },\n} as const;\n\n// Model information interface\nexport interface ModelInfo {\n  readonly id: string;\n  readonly name: string;\n  readonly description?: string;\n  readonly contextLength?: number;\n  readonly maxOutputTokens?: number;\n  readonly pricing?: {\n    input: number; // per 1M tokens\n    output: number; // per 1M tokens\n  };\n}\n\n// Available models result\nexport interface AvailableModelsResult {\n  readonly models: ReadonlyArray<ModelInfo>;\n  readonly cached: boolean;\n  readonly timestamp: number;\n}\n\n// LLM Provider interface\nexport interface ILLMProvider {\n  readonly name: LLMProvider;\n  sendStreamingRequest(request: LLMRequest): AsyncIterable<LLMStreamChunk>;\n  validateConfig(config: Partial<LLMConfig>): ValidationResult<LLMConfig>;\n  getAvailableModels(apiKey: string, baseUrl?: string): Promise<AvailableModelsResult>;\n}\n\nexport type ValidationResult<T> = {\n  success: true;\n  data: T;\n} | {\n  success: false;\n  error: {\n    code: string;\n    message: string;\n    details?: unknown;\n  };\n};","// src/components/layout/PromptGrid.tsx\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Maximize2, Minimize2, Zap, ZapOff } from 'lucide-react';\nimport type { PromptGridProps } from '@/types/app';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Checkbox } from '@/components/ui/checkbox';\n\n/**\n * Responsive grid component for displaying prompts and responses\n * Features slider-based grid controls with auto-generated prompts\n */\nexport const PromptGrid: React.FC<PromptGridProps> = React.memo(({\n  prompts,\n  responses,\n  onPromptChange,\n  onPromptRemove,\n  onPromptAdd,\n  onSendSinglePrompt,\n  isLoading,\n  config,\n  uiState,\n  className = '',\n}) => {\n  const [gridColumns, setGridColumns] = useState(4);\n  const [gridRows, setGridRows] = useState(2);\n  const [fontSize, setFontSize] = useState(12);\n  const [maxHeight, setMaxHeight] = useState(6);\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  \n  // Auto-send state\n  const [autoSend, setAutoSend] = useState(uiState?.autoSend ?? false);\n  const [debounceMs, setDebounceMs] = useState(uiState?.debounceMs ?? 1000);\n  const debounceTimers = useRef<Map<string, NodeJS.Timeout>>(new Map());\n\n  const toggleExpanded = useCallback((id: string) => {\n    setExpandedItems(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(id)) {\n        newSet.delete(id);\n      } else {\n        newSet.add(id);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Debounced auto-send function\n  const debouncedAutoSend = useCallback((promptId: string, content: string) => {\n    if (!autoSend || !onSendSinglePrompt || !config || !content.trim()) {\n      return;\n    }\n\n    // Clear existing timer for this prompt\n    const existingTimer = debounceTimers.current.get(promptId);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Set new timer\n    const timer = setTimeout(() => {\n      onSendSinglePrompt(promptId);\n      debounceTimers.current.delete(promptId);\n    }, debounceMs);\n\n    debounceTimers.current.set(promptId, timer);\n  }, [autoSend, onSendSinglePrompt, config, debounceMs]);\n\n  // Enhanced prompt change handler with auto-send\n  const handlePromptChange = useCallback((id: string, content: string) => {\n    onPromptChange(id, content);\n    \n    // Trigger debounced auto-send if enabled\n    if (autoSend && content.trim()) {\n      debouncedAutoSend(id, content);\n    }\n  }, [onPromptChange, autoSend, debouncedAutoSend]);\n\n  // Cleanup timers on unmount\n  useEffect(() => {\n    return () => {\n      debounceTimers.current.forEach(timer => clearTimeout(timer));\n      debounceTimers.current.clear();\n    };\n  }, []);\n\n  // Auto-generate prompts based on grid dimensions\n  useEffect(() => {\n    const targetPromptCount = gridColumns * gridRows;\n    const currentPromptCount = prompts.length;\n    \n    if (targetPromptCount > currentPromptCount) {\n      // Add more prompts\n      const promptsToAdd = targetPromptCount - currentPromptCount;\n      for (let i = 0; i < promptsToAdd; i++) {\n        onPromptAdd('', `Prompt ${currentPromptCount + i + 1}`);\n      }\n    } else if (targetPromptCount < currentPromptCount) {\n      // Remove excess prompts (from the end)\n      const promptsToDelete = prompts.slice(targetPromptCount);\n      \n      // Remove the excess prompts\n      promptsToDelete.forEach(prompt => {\n        onPromptRemove(prompt.id);\n      });\n    }\n  }, [gridColumns, gridRows, prompts.length, onPromptAdd, onPromptRemove]);\n\n  const handleColumnsChange = useCallback((value: number[]) => {\n    setGridColumns(value[0]);\n  }, []);\n\n  const handleRowsChange = useCallback((value: number[]) => {\n    setGridRows(value[0]);\n  }, []);\n\n  const handleFontSizeChange = useCallback((value: number[]) => {\n    setFontSize(value[0]);\n  }, []);\n\n  const handleMaxHeightChange = useCallback((value: number[]) => {\n    setMaxHeight(value[0]);\n  }, []);\n\n  // Calculate textarea height based on content and max height setting\n  const getTextareaHeight = useCallback((content: string) => {\n    if (!content) return { height: '2rem' }; // 32px minimum\n    const lines = content.split('\\n').length;\n    const estimatedLines = Math.max(lines, Math.ceil(content.length / 50)); // Estimate based on content length\n    const actualLines = Math.min(estimatedLines, maxHeight);\n    const heightInRem = Math.max(2, actualLines * 1.5); // 1.5rem per line, minimum 2rem\n    return { height: `${heightInRem}rem` };\n  }, [maxHeight]);\n\n  const getResponseForPrompt = (promptId: string) => {\n    return responses.find(response => response.promptId === promptId);\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {/* Grid Controls */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Grid</h2>\n          <div className=\"text-xs text-muted-foreground\">\n            {gridColumns} × {gridRows} = {gridColumns * gridRows}\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          {/* Width Control */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Width</label>\n              <span className=\"text-xs text-muted-foreground\">{gridColumns}</span>\n            </div>\n            <Slider\n              value={[gridColumns]}\n              onValueChange={handleColumnsChange}\n              min={1}\n              max={20}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Height Control */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Height</label>\n              <span className=\"text-xs text-muted-foreground\">{gridRows}</span>\n            </div>\n            <Slider\n              value={[gridRows]}\n              onValueChange={handleRowsChange}\n              min={1}\n              max={10}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Font Size Control */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Font</label>\n              <span className=\"text-xs text-muted-foreground\">{fontSize}px</span>\n            </div>\n            <Slider\n              value={[fontSize]}\n              onValueChange={handleFontSizeChange}\n              min={8}\n              max={16}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Max Height Control */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Max Height</label>\n              <span className=\"text-xs text-muted-foreground\">{maxHeight} lines</span>\n            </div>\n            <Slider\n              value={[maxHeight]}\n              onValueChange={handleMaxHeightChange}\n              min={2}\n              max={20}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Auto-Send Toggle */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Auto-Send</label>\n              {autoSend ? (\n                <Zap className=\"h-3 w-3 text-green-500\" />\n              ) : (\n                <ZapOff className=\"h-3 w-3 text-muted-foreground\" />\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={autoSend}\n                onCheckedChange={(checked) => setAutoSend(checked as boolean)}\n                disabled={!config}\n              />\n              <span className=\"text-xs text-muted-foreground\">\n                {config ? 'Enabled' : 'No config'}\n              </span>\n            </div>\n          </div>\n\n          {/* Debounce Control */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs font-medium\">Delay</label>\n              <span className=\"text-xs text-muted-foreground\">{debounceMs}ms</span>\n            </div>\n            <Slider\n              value={[debounceMs]}\n              onValueChange={(value) => setDebounceMs(value[0])}\n              min={500}\n              max={5000}\n              step={250}\n              className=\"w-full\"\n              disabled={!autoSend}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div\n        className=\"prompt-grid-container\"\n        style={{\n          gridTemplateColumns: `repeat(${gridColumns}, minmax(150px, 1fr))`\n        }}\n      >\n        {prompts.map((prompt, index) => {\n          const response = getResponseForPrompt(prompt.id);\n          const isExpanded = expandedItems.has(prompt.id);\n          const isStreaming = response?.response.isStreaming || false;\n          const hasError = !!response?.response.error;\n\n          return (\n            <Card\n              key={prompt.id}\n              className={`transition-all duration-200 ${\n                isExpanded ? 'col-span-full' : ''\n              } ${hasError ? 'border-destructive' : ''}`}\n            >\n              {/* Card Header - Minimal */}\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 p-0.5 pb-0\">\n                <span className=\"text-xs text-muted-foreground\">\n                  {Math.floor(index / gridColumns) + 1},{(index % gridColumns) + 1}\n                </span>\n                <Button\n                  onClick={() => toggleExpanded(prompt.id)}\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-4 w-4\"\n                  title={isExpanded ? 'Minimize' : 'Maximize'}\n                >\n                  {isExpanded ? (\n                    <Minimize2 className=\"h-2 w-2\" />\n                  ) : (\n                    <Maximize2 className=\"h-2 w-2\" />\n                  )}\n                </Button>\n              </CardHeader>\n\n              {/* Prompt Input */}\n              <CardContent className=\"p-0.5 space-y-1\">\n                <div>\n                  <Textarea\n                    value={prompt.content}\n                    onChange={(e) => handlePromptChange(prompt.id, e.target.value)}\n                    disabled={isLoading}\n                    placeholder=\"Prompt...\"\n                    className=\"resize-none p-1\"\n                    style={{\n                      fontSize: `${fontSize}px`,\n                      ...(isExpanded ? { height: '8rem' } : getTextareaHeight(prompt.content))\n                    }}\n                  />\n                </div>\n\n                {/* Response Section */}\n                {response && (\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center justify-between\">\n                      {isStreaming && (\n                        <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\"></div>\n                      )}\n                      {response.response.metadata.tokenCount && (\n                        <span className=\"text-xs text-muted-foreground\">{response.response.metadata.tokenCount}t</span>\n                      )}\n                    </div>\n\n                    <div\n                      className={`prompt-response-container ${\n                        hasError ? 'prompt-response-error' : ''\n                      }`}\n                      style={\n                        isExpanded\n                          ? { minHeight: '12rem' }\n                          : { minHeight: getTextareaHeight(response.response.content || '').height }\n                      }\n                    >\n                      {hasError ? (\n                        <div className=\"text-destructive\" style={{ fontSize: `${fontSize}px` }}>\n                          <div className=\"font-medium\">Error</div>\n                          <div>{response.response.error?.message || 'Unknown error occurred'}</div>\n                        </div>\n                      ) : response.response.content ? (\n                        <div className=\"whitespace-pre-wrap\" style={{ fontSize: `${fontSize}px` }}>\n                          {response.response.content}\n                          {isStreaming && (\n                            <span className=\"inline-block w-1 h-2 bg-primary animate-pulse ml-1\" />\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-muted-foreground italic\" style={{ fontSize: `${fontSize}px` }}>\n                          {isStreaming ? 'Waiting...' : 'No response'}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Loading State */}\n                {isLoading && !response && (\n                  <div className=\"prompt-loading-container\">\n                    <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                      <div className=\"w-1 h-1 border border-primary border-t-transparent rounded-full animate-spin\"></div>\n                      <span style={{ fontSize: `${fontSize}px` }}>•••</span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Grid Statistics */}\n      {prompts.length > 0 && (\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-1 border-t\">\n          <div>\n            {prompts.length} prompts • {responses.length} responses\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default PromptGrid;","// src/types/storage.ts\nexport const STORAGE_TYPES = ['none', 'session', 'local'] as const;\nexport type StorageType = typeof STORAGE_TYPES[number];\n\nexport interface StoragePreference {\n  readonly type: StorageType;\n  readonly acknowledgedRisks: boolean;\n}\n\nexport interface SecurityWarning {\n  readonly level: 'low' | 'medium' | 'high';\n  readonly title: string;\n  readonly description: string;\n  readonly risks: ReadonlyArray<string>;\n  readonly recommendation?: string;\n}\n\nexport interface StorageService {\n  getStoragePreference(): StoragePreference;\n  setStoragePreference(preference: StoragePreference): void;\n  saveAPIKey(provider: string, key: string): void;\n  getAPIKey(provider: string): string | null;\n  clearAPIKey(provider: string): void;\n  clearAllAPIKeys(): void;\n}\n\n// Security warning configurations for each storage type\nexport const SECURITY_WARNINGS: Record<StorageType, SecurityWarning> = {\n  none: {\n    level: 'low',\n    title: 'No Storage (Most Secure)',\n    description: 'API key stored only in memory',\n    risks: ['Lost on page refresh', 'Lost when tab closes'],\n    recommendation: 'Best for maximum security'\n  },\n  session: {\n    level: 'medium',\n    title: 'Session Storage (Recommended)',\n    description: 'API key stored for current browser session',\n    risks: [\n      'Accessible by malicious browser extensions',\n      'Vulnerable to newly discovered site flaws',\n      'Cleared when tab closes'\n    ],\n    recommendation: 'Good balance of security and convenience'\n  },\n  local: {\n    level: 'high',\n    title: 'Local Storage (Least Secure)',\n    description: 'API key stored permanently in browser',\n    risks: [\n      'Persistent target for attackers',\n      'Accessible by malicious browser extensions',\n      'Vulnerable to newly discovered site flaws',\n      'Remains until manually cleared'\n    ],\n    recommendation: 'Use only with strict spending limits'\n  }\n} as const;","// src/components/settings/StorageSecuritySelector.tsx\nimport React, { useState } from 'react';\nimport { AlertTriangle, Shield, ShieldAlert, ShieldOff, Info, Check } from 'lucide-react';\nimport type { StoragePreference, StorageType, SecurityWarning } from '@/types/storage';\nimport { SECURITY_WARNINGS } from '@/types/storage';\nimport { Button } from '@/components/ui/button';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface StorageSecuritySelectorProps {\n  currentPreference: StoragePreference;\n  onPreferenceChange: (preference: StoragePreference) => void;\n  className?: string;\n}\n\n/**\n * Security settings component for API key storage with three-tier model\n */\nexport const StorageSecuritySelector: React.FC<StorageSecuritySelectorProps> = ({\n  currentPreference,\n  onPreferenceChange,\n  className = '',\n}) => {\n  const [showDetails, setShowDetails] = useState<StorageType | null>(null);\n\n  const getSecurityIcon = (level: SecurityWarning['level']) => {\n    switch (level) {\n      case 'low':\n        return <Shield className=\"h-5 w-5 text-green-500\" />;\n      case 'medium':\n        return <ShieldAlert className=\"h-5 w-5 text-orange-500\" />;\n      case 'high':\n        return <ShieldOff className=\"h-5 w-5 text-red-500\" />;\n    }\n  };\n\n  const getSecurityColor = (level: SecurityWarning['level']) => {\n    switch (level) {\n      case 'low':\n        return 'border-green-500/20 bg-accent text-accent-foreground';\n      case 'medium':\n        return 'border-orange-500/20 bg-accent text-accent-foreground';\n      case 'high':\n        return 'border-red-500/20 bg-accent text-accent-foreground';\n    }\n  };\n\n  const handleStorageTypeChange = (type: StorageType) => {\n    onPreferenceChange({\n      type,\n      acknowledgedRisks: type === 'none' ? true : false, // No risks for memory-only storage\n    });\n  };\n\n  const handleRiskAcknowledgment = (acknowledged: boolean) => {\n    onPreferenceChange({\n      ...currentPreference,\n      acknowledgedRisks: acknowledged,\n    });\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold flex items-center space-x-2\">\n          <Shield className=\"h-5 w-5\" />\n          <span>API Key Storage Security</span>\n        </h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Choose how your API keys are stored. Each option has different security implications.\n        </p>\n      </div>\n\n      {/* Storage Options */}\n      <RadioGroup\n        value={currentPreference.type}\n        onValueChange={(value) => handleStorageTypeChange(value as StorageType)}\n        className=\"space-y-4\"\n      >\n        {Object.entries(SECURITY_WARNINGS).map(([type, warning]) => {\n          const storageType = type as StorageType;\n          const isSelected = currentPreference.type === storageType;\n          const isExpanded = showDetails === storageType;\n\n          return (\n            <div\n              key={storageType}\n              className={`border rounded-lg transition-all cursor-pointer ${\n                isSelected\n                  ? `${getSecurityColor(warning.level)} border-2`\n                  : 'border-border hover:border-muted-foreground'\n              }`}\n              onClick={() => handleStorageTypeChange(storageType)}\n            >\n              {/* Option Header */}\n              <div className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    <RadioGroupItem\n                      value={storageType}\n                      id={storageType}\n                      className=\"pointer-events-none\"\n                    />\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getSecurityIcon(warning.level)}\n                        <span className=\"font-medium\">{warning.title}</span>\n                      </div>\n\n                      <Button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setShowDetails(isExpanded ? null : storageType);\n                        }}\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        title=\"Show details\"\n                      >\n                        <Info className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {warning.description}\n                    </p>\n\n                    {warning.recommendation && (\n                      <p className=\"text-sm text-primary mt-1 font-medium\">\n                        {warning.recommendation}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Expanded Details */}\n              {isExpanded && (\n                <div className=\"px-4 pb-4 border-t bg-muted/20\">\n                  <div className=\"pt-4 space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2 flex items-center space-x-1\">\n                        <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                        <span>Security Risks</span>\n                      </h4>\n                      <ul className=\"text-sm space-y-1\">\n                        {warning.risks.map((risk, index) => (\n                          <li key={index} className=\"flex items-start space-x-2\">\n                            <span className=\"text-orange-500 mt-0.5\">•</span>\n                            <span>{risk}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {storageType === 'none' && (\n                      <Alert className=\"border-green-200 bg-green-50\">\n                        <Check className=\"h-4 w-4 text-green-600\" />\n                        <AlertDescription>\n                          <p className=\"font-medium text-green-800\">Most Secure Option</p>\n                          <p className=\"text-green-700 text-sm\">\n                            Your API key will only exist in memory and will be lost when you refresh\n                            the page or close the tab. This provides maximum security but requires\n                            re-entering your key each session.\n                          </p>\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    {storageType === 'session' && (\n                      <Alert className=\"border-blue-200 bg-blue-50\">\n                        <Info className=\"h-4 w-4 text-blue-600\" />\n                        <AlertDescription>\n                          <p className=\"font-medium text-blue-800\">Recommended Balance</p>\n                          <p className=\"text-blue-700 text-sm\">\n                            Your API key will persist for the current browser session but will be\n                            cleared when you close the tab. This provides a good balance between\n                            security and convenience.\n                          </p>\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    {storageType === 'local' && (\n                      <Alert variant=\"destructive\" className=\"border-red-200 bg-red-50\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          <p className=\"font-medium\">Highest Risk</p>\n                          <p className=\"text-sm\">\n                            Your API key will be stored permanently in your browser until manually\n                            cleared. Only use this option if you understand the risks and have\n                            strict spending limits on your API account.\n                          </p>\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </RadioGroup>\n\n      {/* Risk Acknowledgment */}\n      {currentPreference.type !== 'none' && (\n        <Alert className=\"border-border bg-muted/50 cursor-pointer\" onClick={() => handleRiskAcknowledgment(!currentPreference.acknowledgedRisks)}>\n          <AlertTriangle className=\"h-5 w-5 text-muted-foreground\" />\n          <AlertDescription>\n            <h4 className=\"font-medium text-foreground mb-2\">\n              Security Acknowledgment Required\n            </h4>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              By selecting this storage option, you acknowledge the security risks outlined above.\n              Please ensure you understand the implications before proceeding.\n            </p>\n            \n            <div className=\"flex items-start space-x-2\">\n              <Checkbox\n                id=\"risk-acknowledgment\"\n                checked={currentPreference.acknowledgedRisks}\n                onCheckedChange={handleRiskAcknowledgment}\n                className=\"pointer-events-none\"\n              />\n              <div className=\"text-sm text-foreground\">\n                I understand and accept the security risks associated with{' '}\n                <strong>\n                  {SECURITY_WARNINGS[currentPreference.type].title.toLowerCase()}\n                </strong>\n              </div>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default StorageSecuritySelector;","// src/components/settings/LLMConfigurationPanel.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Settings, Eye, EyeOff, AlertCircle, CheckCircle, Loader2, RefreshCw, Save } from 'lucide-react';\nimport type { LLMConfig, LLMProvider, ModelInfo, AvailableModelsResult } from '@/types/llm';\nimport { DEFAULT_PROVIDER_CONFIGS, PROVIDER_MODELS } from '@/types/llm';\nimport { StorageSecuritySelector } from './StorageSecuritySelector';\nimport { storageService } from '@/services/storage';\nimport { llmProviderManager } from '@/services/llm';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Separator } from '@/components/ui/separator';\n\n// Optimized debounce utility with immediate execution option\nconst debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  immediate = false\n): ((...args: Parameters<T>) => void) => {\n  let timeout: NodeJS.Timeout | null = null;\n  return (...args: Parameters<T>) => {\n    const callNow = immediate && !timeout;\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      timeout = null;\n      if (!immediate) func(...args);\n    }, wait);\n    if (callNow) func(...args);\n  };\n};\n\ninterface LLMConfigurationPanelProps {\n  config: LLMConfig | null;\n  onConfigChange: (config: LLMConfig) => void;\n  className?: string;\n}\n\n/**\n * Advanced LLM configuration interface with provider-specific settings\n */\nexport const LLMConfigurationPanel: React.FC<LLMConfigurationPanelProps> = React.memo(({\n  config,\n  onConfigChange,\n  className = '',\n}) => {\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [validationStatus, setValidationStatus] = useState<'idle' | 'validating' | 'valid' | 'invalid'>('idle');\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [storagePreference, setStoragePreference] = useState(storageService.getStoragePreference());\n  \n  // Model loading states\n  const [availableModels, setAvailableModels] = useState<Record<LLMProvider, ModelInfo[]>>({\n    openai: [],\n    anthropic: [],\n    gemini: [],\n  });\n  const [modelsLoading, setModelsLoading] = useState<Record<LLMProvider, boolean>>({\n    openai: false,\n    anthropic: false,\n    gemini: false,\n  });\n  const [modelsError, setModelsError] = useState<Record<LLMProvider, string | null>>({\n    openai: null,\n    anthropic: null,\n    gemini: null,\n  });\n\n  // Form state\n  const [formData, setFormData] = useState<Partial<LLMConfig>>(() => {\n    if (config) return config;\n    \n    // Try to load from storage\n    const providers: LLMProvider[] = ['openai', 'anthropic', 'gemini'];\n    for (const provider of providers) {\n      const apiKey = storageService.getAPIKey(provider);\n      if (apiKey) {\n        return {\n          ...DEFAULT_PROVIDER_CONFIGS[provider],\n          apiKey,\n        };\n      }\n    }\n    \n    return DEFAULT_PROVIDER_CONFIGS.openai;\n  });\n\n  // Update storage preference when it changes\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoragePreference(storageService.getStoragePreference());\n    };\n\n    // Listen for storage changes (custom event)\n    window.addEventListener('storage-preference-changed', handleStorageChange);\n    return () => window.removeEventListener('storage-preference-changed', handleStorageChange);\n  }, []);\n\n  // Auto-load models for providers with saved API keys on component mount\n  useEffect(() => {\n    const providers: LLMProvider[] = ['openai', 'anthropic', 'gemini'];\n    \n    providers.forEach(provider => {\n      const apiKey = storageService.getAPIKey(provider);\n      if (apiKey) {\n        const defaultConfig = DEFAULT_PROVIDER_CONFIGS[provider];\n        loadModelsForProvider(provider, apiKey, defaultConfig.baseUrl);\n      }\n    });\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Validate configuration\n  const validateConfig = async (configToValidate: Partial<LLMConfig>) => {\n    if (!configToValidate.provider || !configToValidate.apiKey) {\n      return;\n    }\n\n    setValidationStatus('validating');\n    setValidationError(null);\n\n    try {\n      // Create a complete config object with defaults\n      const defaultConfig = DEFAULT_PROVIDER_CONFIGS[configToValidate.provider];\n      const completeConfig: LLMConfig = {\n        provider: configToValidate.provider,\n        apiKey: configToValidate.apiKey,\n        baseUrl: configToValidate.baseUrl || defaultConfig.baseUrl,\n        model: configToValidate.model || defaultConfig.model,\n        temperature: configToValidate.temperature ?? defaultConfig.temperature,\n        maxTokens: configToValidate.maxTokens ?? defaultConfig.maxTokens,\n        topP: configToValidate.topP ?? defaultConfig.topP,\n        frequencyPenalty: configToValidate.frequencyPenalty ?? defaultConfig.frequencyPenalty,\n        presencePenalty: configToValidate.presencePenalty ?? defaultConfig.presencePenalty,\n        systemMessage: configToValidate.systemMessage || defaultConfig.systemMessage,\n      };\n\n      const validation = llmProviderManager.validateConfig(\n        configToValidate.provider,\n        completeConfig\n      );\n\n      if (validation.success) {\n        setValidationStatus('valid');\n        setValidationError(null);\n      } else {\n        setValidationStatus('invalid');\n        setValidationError(validation.error.message);\n      }\n    } catch (error) {\n      setValidationStatus('invalid');\n      setValidationError(error instanceof Error ? error.message : 'Validation failed');\n    }\n  };\n\n  // Handle form field changes\n  const handleFieldChange = (field: keyof LLMConfig, value: unknown) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n\n    // Reset validation status when key fields change\n    if (field === 'provider' || field === 'apiKey' || field === 'model') {\n      setValidationStatus('idle');\n      setValidationError(null);\n    }\n\n    // Auto-validate after a delay\n    if (field === 'apiKey' && typeof value === 'string' && value.length > 10) {\n      setTimeout(() => validateConfig(newFormData), 500);\n    }\n\n    // Auto-save for non-API key fields (API key is handled separately)\n    if (field !== 'apiKey' && newFormData.provider && newFormData.apiKey) {\n      autoSaveConfig(newFormData);\n    }\n  };\n\n  // Load models for a provider\n  const loadModelsForProvider = async (provider: LLMProvider, apiKey: string, baseUrl?: string) => {\n    if (!apiKey) return;\n\n    setModelsLoading(prev => ({ ...prev, [provider]: true }));\n    setModelsError(prev => ({ ...prev, [provider]: null }));\n\n    try {\n      const result: AvailableModelsResult = await llmProviderManager.getAvailableModels(\n        provider,\n        apiKey,\n        baseUrl\n      );\n      \n      setAvailableModels(prev => ({ ...prev, [provider]: result.models }));\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to load models';\n      setModelsError(prev => ({ ...prev, [provider]: errorMessage }));\n      \n      // Fallback to static models\n      const staticModels = PROVIDER_MODELS[provider].map(modelId => ({\n        id: modelId,\n        name: modelId,\n        description: `${provider} model`,\n      }));\n      setAvailableModels(prev => ({ ...prev, [provider]: staticModels }));\n    } finally {\n      setModelsLoading(prev => ({ ...prev, [provider]: false }));\n    }\n  };\n\n  // Handle provider change\n  const handleProviderChange = (provider: LLMProvider) => {\n    const defaultConfig = DEFAULT_PROVIDER_CONFIGS[provider];\n    const existingApiKey = storageService.getAPIKey(provider);\n    \n    const newFormData = {\n      ...defaultConfig,\n      apiKey: existingApiKey || '',\n    };\n    \n    setFormData(newFormData);\n    setValidationStatus('idle');\n    setValidationError(null);\n\n    // Auto-save if we have an API key\n    if (existingApiKey) {\n      autoSaveConfig(newFormData);\n      loadModelsForProvider(provider, existingApiKey, defaultConfig.baseUrl);\n    }\n  };\n\n  // Auto-save configuration with debouncing\n  const autoSaveConfig = useCallback(\n    debounce((configToSave: Partial<LLMConfig>) => {\n      if (!configToSave.provider || !configToSave.apiKey) {\n        return;\n      }\n\n      try {\n        // Save the API key to storage\n        storageService.saveAPIKey(configToSave.provider, configToSave.apiKey);\n\n        const fullConfig: LLMConfig = {\n          provider: configToSave.provider,\n          apiKey: configToSave.apiKey,\n          baseUrl: configToSave.baseUrl || DEFAULT_PROVIDER_CONFIGS[configToSave.provider].baseUrl,\n          model: configToSave.model || DEFAULT_PROVIDER_CONFIGS[configToSave.provider].model,\n          temperature: configToSave.temperature ?? DEFAULT_PROVIDER_CONFIGS[configToSave.provider].temperature,\n          maxTokens: configToSave.maxTokens ?? DEFAULT_PROVIDER_CONFIGS[configToSave.provider].maxTokens,\n          topP: configToSave.topP ?? DEFAULT_PROVIDER_CONFIGS[configToSave.provider].topP,\n          frequencyPenalty: configToSave.frequencyPenalty ?? DEFAULT_PROVIDER_CONFIGS[configToSave.provider].frequencyPenalty,\n          presencePenalty: configToSave.presencePenalty ?? DEFAULT_PROVIDER_CONFIGS[configToSave.provider].presencePenalty,\n          systemMessage: configToSave.systemMessage || DEFAULT_PROVIDER_CONFIGS[configToSave.provider].systemMessage,\n        };\n\n        // Validate before saving\n        const validation = llmProviderManager.validateConfig(configToSave.provider, fullConfig);\n        if (validation.success) {\n          onConfigChange(validation.data);\n        }\n      } catch (error) {\n        console.warn('Auto-save failed:', error);\n      }\n    }, 1000),\n    [onConfigChange]\n  );\n\n  // Handle API key change\n  const handleApiKeyChange = (apiKey: string) => {\n    handleFieldChange('apiKey', apiKey);\n    \n    // Auto-save when API key changes\n    if (formData.provider && apiKey.length > 10) {\n      const configToSave = { ...formData, apiKey };\n      autoSaveConfig(configToSave);\n      \n      // Load models when API key is entered\n      setTimeout(() => {\n        loadModelsForProvider(formData.provider!, apiKey, formData.baseUrl);\n      }, 500);\n    }\n  };\n\n  // Refresh models for current provider\n  const refreshModels = () => {\n    if (formData.provider && formData.apiKey) {\n      loadModelsForProvider(formData.provider, formData.apiKey, formData.baseUrl);\n    }\n  };\n\n\n  // Handle storage preference change\n  const handleStoragePreferenceChange = (preference: typeof storagePreference) => {\n    storageService.setStoragePreference(preference);\n    setStoragePreference(preference);\n    \n    // Dispatch custom event\n    window.dispatchEvent(new CustomEvent('storage-preference-changed'));\n  };\n\n  const getValidationIcon = () => {\n    switch (validationStatus) {\n      case 'validating':\n        return <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />;\n      case 'valid':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'invalid':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n          <Settings className=\"h-6 w-6\" />\n          <span>LLM Configuration</span>\n        </h2>\n        <p className=\"text-muted-foreground\">\n          Configure your LLM provider settings and API credentials.\n        </p>\n      </div>\n\n      {/* Storage Security Settings */}\n      <StorageSecuritySelector\n        currentPreference={storagePreference}\n        onPreferenceChange={handleStoragePreferenceChange}\n      />\n\n      {/* Provider Selection */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Provider Settings</h3>\n        \n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium\">Provider</label>\n          <div className=\"grid grid-cols-3 gap-2\">\n            {Object.keys(DEFAULT_PROVIDER_CONFIGS).map((provider) => (\n              <Button\n                key={provider}\n                onClick={() => handleProviderChange(provider as LLMProvider)}\n                variant={formData.provider === provider ? 'default' : 'outline'}\n                className=\"h-auto p-3 flex-col\"\n              >\n                <div className=\"font-medium capitalize\">{provider}</div>\n                <div className=\"text-xs opacity-70 mt-1\">\n                  {availableModels[provider as LLMProvider].length > 0\n                    ? `${availableModels[provider as LLMProvider].length} models`\n                    : `${PROVIDER_MODELS[provider as LLMProvider].length} models`\n                  }\n                </div>\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* API Key */}\n        <div className=\"space-y-2\">\n          <Label>API Key</Label>\n          <div className=\"relative\">\n            <form autoComplete=\"on\">\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={`${formData.provider} api key`}\n                autoComplete=\"username\"\n                className=\"hidden-form-input\"\n                readOnly\n                aria-hidden=\"true\"\n                tabIndex={-1}\n                title={`${formData.provider} API key username`}\n              />\n              <Input\n                type={showApiKey ? 'text' : 'password'}\n                name=\"password\"\n                value={formData.apiKey || ''}\n                onChange={(e) => handleApiKeyChange(e.target.value)}\n                placeholder={`Enter your ${formData.provider} API key`}\n                className=\"pr-20\"\n                autoComplete=\"current-password\"\n              />\n            </form>\n            <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-1\">\n              {getValidationIcon()}\n              <Button\n                type=\"button\"\n                onClick={() => setShowApiKey(!showApiKey)}\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-8 w-8\"\n              >\n                {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n          {validationError && (\n            <p className=\"text-sm text-destructive\">{validationError}</p>\n          )}\n        </div>\n\n        {/* Model Selection */}\n        {formData.provider && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex flex-col\">\n                <Label>Model</Label>\n                <span className=\"text-xs text-muted-foreground\">\n                  Prices shown as (input cost / output cost) per 1M tokens\n                </span>\n              </div>\n              {formData.apiKey && (\n                <Button\n                  type=\"button\"\n                  onClick={refreshModels}\n                  disabled={modelsLoading[formData.provider]}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 px-2\"\n                >\n                  <RefreshCw className={`h-3 w-3 ${modelsLoading[formData.provider] ? 'animate-spin' : ''}`} />\n                  <span className=\"ml-1 text-xs\">Refresh</span>\n                </Button>\n              )}\n            </div>\n            \n            <Select\n              value={formData.model || ''}\n              onValueChange={(value) => handleFieldChange('model', value)}\n              disabled={modelsLoading[formData.provider]}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder={\n                  modelsLoading[formData.provider]\n                    ? \"Loading models...\"\n                    : availableModels[formData.provider].length > 0\n                      ? \"Select a model\"\n                      : \"Enter API key to load models\"\n                } />\n              </SelectTrigger>\n              <SelectContent>\n                {availableModels[formData.provider].length > 0 ? (\n                  availableModels[formData.provider].map((model) => (\n                    <SelectItem key={model.id} value={model.id}>\n                      <div className=\"flex flex-col py-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium\">{model.name}</span>\n                          {model.pricing && (\n                            <span className=\"text-xs text-muted-foreground ml-2\">\n                              ${model.pricing.input}/${model.pricing.output}\n                            </span>\n                          )}\n                        </div>\n                        {model.description && (\n                          <span className=\"text-xs text-muted-foreground truncate\">\n                            {model.description}\n                          </span>\n                        )}\n                      </div>\n                    </SelectItem>\n                  ))\n                ) : (\n                  PROVIDER_MODELS[formData.provider].map((model) => (\n                    <SelectItem key={model} value={model}>\n                      {model}\n                    </SelectItem>\n                  ))\n                )}\n              </SelectContent>\n            </Select>\n            \n            {modelsError[formData.provider] && (\n              <p className=\"text-sm text-destructive flex items-center\">\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                {modelsError[formData.provider]}\n              </p>\n            )}\n            \n            {modelsLoading[formData.provider] && (\n              <p className=\"text-sm text-muted-foreground flex items-center\">\n                <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                Loading available models...\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Base URL */}\n        <div className=\"space-y-2\">\n          <Label>Base URL</Label>\n          <Input\n            type=\"url\"\n            value={formData.baseUrl || ''}\n            onChange={(e) => handleFieldChange('baseUrl', e.target.value)}\n            placeholder=\"API base URL\"\n          />\n        </div>\n      </div>\n\n      {/* Advanced Parameters */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Advanced Parameters</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Temperature */}\n          <div className=\"space-y-2\">\n            <Label>\n              Temperature ({formData.temperature ?? 0.7})\n            </Label>\n            <Slider\n              value={[formData.temperature ?? 0.7]}\n              onValueChange={(value) => handleFieldChange('temperature', value[0])}\n              max={2}\n              min={0}\n              step={0.1}\n              className=\"w-full\"\n            />\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>Focused</span>\n              <span>Creative</span>\n            </div>\n          </div>\n\n          {/* Max Tokens */}\n          <div className=\"space-y-2\">\n            <Label>Max Tokens</Label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              max=\"32000\"\n              value={formData.maxTokens ?? 2048}\n              onChange={(e) => handleFieldChange('maxTokens', parseInt(e.target.value))}\n            />\n          </div>\n\n          {/* Top P */}\n          <div className=\"space-y-2\">\n            <Label>\n              Top P ({formData.topP ?? 1.0})\n            </Label>\n            <Slider\n              value={[formData.topP ?? 1.0]}\n              onValueChange={(value) => handleFieldChange('topP', value[0])}\n              max={1}\n              min={0}\n              step={0.1}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Frequency Penalty */}\n          <div className=\"space-y-2\">\n            <Label>\n              Frequency Penalty ({formData.frequencyPenalty ?? 0.0})\n            </Label>\n            <Slider\n              value={[formData.frequencyPenalty ?? 0.0]}\n              onValueChange={(value) => handleFieldChange('frequencyPenalty', value[0])}\n              max={2}\n              min={-2}\n              step={0.1}\n              className=\"w-full\"\n            />\n          </div>\n        </div>\n\n        {/* System Message */}\n        <div className=\"space-y-2\">\n          <Label>System Message</Label>\n          <Textarea\n            value={formData.systemMessage || ''}\n            onChange={(e) => handleFieldChange('systemMessage', e.target.value)}\n            placeholder=\"Optional system message to set context for the AI\"\n            rows={3}\n            className=\"resize-none\"\n          />\n        </div>\n      </div>\n\n      <Separator />\n      \n      {/* Actions */}\n      <div className=\"flex items-center justify-between pt-6\">\n        <div className=\"text-sm text-muted-foreground\">\n          {validationStatus === 'valid' && '✅ Configuration is valid and auto-saved'}\n          {validationStatus === 'invalid' && '❌ Please fix configuration errors'}\n          {validationStatus === 'validating' && '⏳ Validating configuration...'}\n          {validationStatus === 'idle' && formData.apiKey && (\n            <span className=\"flex items-center\">\n              <Save className=\"h-4 w-4 mr-1\" />\n              Settings auto-save as you type\n            </span>\n          )}\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <Button\n            onClick={() => validateConfig(formData)}\n            disabled={!formData.provider || !formData.apiKey || validationStatus === 'validating'}\n            variant=\"outline\"\n          >\n            Validate\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default LLMConfigurationPanel;"],"names":["PROVIDER_MODELS","openai","anthropic","gemini","DEFAULT_PROVIDER_CONFIGS","provider","baseUrl","model","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemMessage","PromptGrid","React","memo","prompts","responses","onPromptChange","onPromptRemove","onPromptAdd","onSendSinglePrompt","isLoading","config","uiState","className","gridColumns","setGridColumns","useState","gridRows","setGridRows","fontSize","setFontSize","maxHeight","setMaxHeight","expandedItems","setExpandedItems","Set","autoSend","setAutoSend","debounceMs","setDebounceMs","debounceTimers","useRef","Map","toggleExpanded","useCallback","id","prev","newSet","has","delete","add","debouncedAutoSend","promptId","content","trim","existingTimer","current","get","clearTimeout","timer","setTimeout","set","handlePromptChange","useEffect","forEach","clear","targetPromptCount","currentPromptCount","length","promptsToAdd","i","slice","prompt","handleColumnsChange","value","handleRowsChange","handleFontSizeChange","handleMaxHeightChange","getTextareaHeight","height","lines","split","estimatedLines","Math","max","ceil","actualLines","min","jsxs","children","jsx","jsxRuntimeExports","Slider","onValueChange","step","Zap","ZapOff","Checkbox","checked","onCheckedChange","disabled","style","gridTemplateColumns","map","index","response","find","isExpanded","isStreaming","hasError","error","Card","CardHeader","floor","Button","onClick","variant","size","title","Minimize2","Maximize2","CardContent","Textarea","onChange","e","target","placeholder","metadata","tokenCount","minHeight","_a","message","SECURITY_WARNINGS","none","level","description","risks","recommendation","session","local","StorageSecuritySelector","currentPreference","onPreferenceChange","showDetails","setShowDetails","getSecurityIcon","Shield","ShieldAlert","ShieldOff","getSecurityColor","handleStorageTypeChange","type","acknowledgedRisks","handleRiskAcknowledgment","acknowledged","RadioGroup","Object","entries","warning","storageType","isSelected","RadioGroupItem","stopPropagation","Info","AlertTriangle","risk","Alert","Check","AlertDescription","toLowerCase","LLMConfigurationPanel","onConfigChange","showApiKey","setShowApiKey","validationStatus","setValidationStatus","validationError","setValidationError","storagePreference","setStoragePreference","storageService","getStoragePreference","availableModels","setAvailableModels","modelsLoading","setModelsLoading","modelsError","setModelsError","formData","setFormData","providers","apiKey","getAPIKey","handleStorageChange","window","addEventListener","removeEventListener","loadModelsForProvider","validateConfig","async","configToValidate","defaultConfig","completeConfig","validation","llmProviderManager","success","Error","handleFieldChange","field","newFormData","autoSaveConfig","result","getAvailableModels","models","errorMessage","staticModels","modelId","name","func","wait","immediate","timeout","args","callNow","debounce","configToSave","saveAPIKey","fullConfig","data","Settings","preference","dispatchEvent","CustomEvent","keys","existingApiKey","handleProviderChange","Label","autoComplete","readOnly","tabIndex","Input","handleApiKeyChange","Loader2","CheckCircle","AlertCircle","getValidationIcon","EyeOff","Eye","RefreshCw","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","pricing","input","output","parseInt","rows","Separator","Save"],"mappings":"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"}