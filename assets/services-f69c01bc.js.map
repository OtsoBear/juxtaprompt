{"version":3,"file":"services-f69c01bc.js","sources":["../../src/types/url-state.ts","../../src/services/storage/enhanced-storage-service.ts","../../src/services/url-state/url-state-manager.ts"],"sourcesContent":["// src/types/url-state.ts\n\nexport interface UIState {\n  readonly gridColumns: number;\n  readonly autoSend: boolean;\n  readonly debounceMs: number;\n  readonly showAdvancedSettings: boolean;\n  readonly theme: 'light' | 'dark' | 'system';\n}\n\nexport interface URLState {\n  readonly prompts: ReadonlyArray<string>;\n  readonly config: {\n    readonly provider?: 'openai' | 'anthropic' | 'gemini' | undefined;\n    readonly model?: string | undefined;\n    readonly temperature?: number | undefined;\n    readonly maxTokens?: number | undefined;\n    readonly topP?: number | undefined;\n    readonly frequencyPenalty?: number | undefined;\n    readonly presencePenalty?: number | undefined;\n    readonly systemMessage?: string | undefined;\n  };\n  readonly ui: {\n    readonly gridColumns?: number | undefined;\n    readonly autoSend?: boolean | undefined;\n    readonly debounceMs?: number | undefined;\n    readonly showAdvancedSettings?: boolean | undefined;\n    readonly theme?: 'light' | 'dark' | 'system' | undefined;\n  };\n}\n\nexport interface URLStateService {\n  saveStateToURL(state: URLState): void;\n  loadStateFromURL(): URLState | null;\n  clearURLState(): void;\n  getShareableURL(state: URLState): string;\n}\n\nexport interface URLStateManager extends URLStateService {\n  readonly maxURLLength: number;\n  compressState(state: URLState): string;\n  decompressState(compressed: string): URLState;\n  validateState(state: unknown): URLState | null;\n}\n\n// Default UI state\nexport const DEFAULT_UI_STATE: UIState = {\n  gridColumns: 2,\n  autoSend: false,\n  debounceMs: 500,\n  showAdvancedSettings: false,\n  theme: 'system',\n} as const;\n\n// URL state compression settings\nexport const URL_STATE_CONFIG = {\n  maxURLLength: 2000,\n  compressionLevel: 6,\n  parameterName: 'state',\n} as const;","// src/services/storage/enhanced-storage-service.ts\nimport type { StoragePreference, StorageService } from '@/types/storage';\nimport type { LLMProvider } from '@/types/llm';\nimport { validateStoragePreference } from '@/schemas/llm-schemas';\n\n/**\n * Enhanced storage service with three-tier security model:\n * - None: API keys held only in memory (most secure)\n * - Session: Keys cleared when tab closes (recommended default)\n * - Local: Persistent storage with risk warnings (least secure)\n */\nexport class EnhancedStorageService implements StorageService {\n  private readonly inMemoryKeys = new Map<string, string>();\n  private readonly PREFERENCE_KEY = 'juxtaprompt_storage_preference';\n  private readonly API_KEY_PREFIX = 'juxtaprompt_api_key_';\n\n  /**\n   * Get the current storage preference with validation\n   */\n  public getStoragePreference(): StoragePreference {\n    const stored = localStorage.getItem(this.PREFERENCE_KEY);\n    if (stored) {\n      try {\n        const parsed = JSON.parse(stored);\n        const validation = validateStoragePreference(parsed);\n        if (validation.success) {\n          return validation.data;\n        }\n      } catch (error) {\n        console.warn('Failed to parse storage preference:', error);\n      }\n    }\n    \n    // Return default preference\n    return {\n      type: 'session', // Default to session storage for security/convenience balance\n      acknowledgedRisks: false\n    };\n  }\n\n  /**\n   * Set storage preference with validation\n   */\n  public setStoragePreference(preference: StoragePreference): void {\n    const validation = validateStoragePreference(preference);\n    if (!validation.success) {\n      throw new Error(`Invalid storage preference: ${validation.error.message}`);\n    }\n\n    localStorage.setItem(this.PREFERENCE_KEY, JSON.stringify(preference));\n    \n    // If switching to a more secure option, clear less secure storage\n    if (preference.type === 'none') {\n      this.clearSessionStorage();\n      this.clearLocalStorage();\n    } else if (preference.type === 'session') {\n      this.clearLocalStorage();\n    }\n  }\n\n  /**\n   * Save API key according to current storage preference\n   */\n  public saveAPIKey(provider: LLMProvider, key: string): void {\n    if (!key || key.trim().length === 0) {\n      throw new Error('API key cannot be empty');\n    }\n\n    const preference = this.getStoragePreference();\n    const storageKey = this.getStorageKey(provider);\n    \n    // Clear from all other storage types first\n    this.clearAPIKeyFromAllStorageTypes(provider);\n    \n    switch (preference.type) {\n      case 'none':\n        this.inMemoryKeys.set(storageKey, key);\n        break;\n      case 'session':\n        try {\n          sessionStorage.setItem(storageKey, key);\n        } catch (error) {\n          console.warn('Failed to save to session storage, falling back to memory:', error);\n          this.inMemoryKeys.set(storageKey, key);\n        }\n        break;\n      case 'local':\n        if (!preference.acknowledgedRisks) {\n          throw new Error('Cannot use local storage without acknowledging security risks');\n        }\n        try {\n          localStorage.setItem(storageKey, key);\n        } catch (error) {\n          console.warn('Failed to save to local storage, falling back to session:', error);\n          try {\n            sessionStorage.setItem(storageKey, key);\n          } catch (sessionError) {\n            console.warn('Failed to save to session storage, falling back to memory:', sessionError);\n            this.inMemoryKeys.set(storageKey, key);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unknown storage type: ${preference.type}`);\n    }\n  }\n\n  /**\n   * Get API key from current storage preference\n   */\n  public getAPIKey(provider: LLMProvider): string | null {\n    const preference = this.getStoragePreference();\n    const storageKey = this.getStorageKey(provider);\n    \n    switch (preference.type) {\n      case 'none':\n        return this.inMemoryKeys.get(storageKey) ?? null;\n      case 'session':\n        try {\n          return sessionStorage.getItem(storageKey);\n        } catch (error) {\n          console.warn('Failed to read from session storage:', error);\n          return this.inMemoryKeys.get(storageKey) ?? null;\n        }\n      case 'local':\n        try {\n          return localStorage.getItem(storageKey);\n        } catch (error) {\n          console.warn('Failed to read from local storage:', error);\n          try {\n            return sessionStorage.getItem(storageKey);\n          } catch (sessionError) {\n            console.warn('Failed to read from session storage:', sessionError);\n            return this.inMemoryKeys.get(storageKey) ?? null;\n          }\n        }\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Clear API key for specific provider from all storage locations\n   */\n  public clearAPIKey(provider: LLMProvider): void {\n    this.clearAPIKeyFromAllStorageTypes(provider);\n  }\n\n  /**\n   * Clear all API keys from all storage locations\n   */\n  public clearAllAPIKeys(): void {\n    // Clear memory storage\n    this.inMemoryKeys.clear();\n    \n    // Clear session storage\n    this.clearSessionStorage();\n    \n    // Clear local storage (but preserve preferences)\n    this.clearLocalStorage();\n  }\n\n  /**\n   * Get all stored API key providers\n   */\n  public getStoredProviders(): LLMProvider[] {\n    const providers: LLMProvider[] = [];\n    const allProviders: LLMProvider[] = ['openai', 'anthropic', 'gemini'];\n    \n    for (const provider of allProviders) {\n      if (this.getAPIKey(provider)) {\n        providers.push(provider);\n      }\n    }\n    \n    return providers;\n  }\n\n  /**\n   * Check if any API keys are stored\n   */\n  public hasStoredKeys(): boolean {\n    return this.getStoredProviders().length > 0;\n  }\n\n  /**\n   * Get storage statistics for debugging/monitoring\n   */\n  public getStorageStats(): {\n    memoryKeys: number;\n    sessionKeys: number;\n    localKeys: number;\n    preference: StoragePreference;\n  } {\n    return {\n      memoryKeys: this.inMemoryKeys.size,\n      sessionKeys: this.countKeysInStorage(sessionStorage),\n      localKeys: this.countKeysInStorage(localStorage) - 1, // Exclude preference key\n      preference: this.getStoragePreference(),\n    };\n  }\n\n  // Private helper methods\n\n  private getStorageKey(provider: LLMProvider): string {\n    return `${this.API_KEY_PREFIX}${provider}`;\n  }\n\n  private clearAPIKeyFromAllStorageTypes(provider: LLMProvider): void {\n    const storageKey = this.getStorageKey(provider);\n    \n    // Clear from memory\n    this.inMemoryKeys.delete(storageKey);\n    \n    // Clear from session storage\n    try {\n      sessionStorage.removeItem(storageKey);\n    } catch (error) {\n      console.warn('Failed to clear from session storage:', error);\n    }\n    \n    // Clear from local storage\n    try {\n      localStorage.removeItem(storageKey);\n    } catch (error) {\n      console.warn('Failed to clear from local storage:', error);\n    }\n  }\n\n  private clearSessionStorage(): void {\n    try {\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < sessionStorage.length; i++) {\n        const key = sessionStorage.key(i);\n        if (key?.startsWith(this.API_KEY_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => sessionStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear session storage:', error);\n    }\n  }\n\n  private clearLocalStorage(): void {\n    try {\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith(this.API_KEY_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear local storage:', error);\n    }\n  }\n\n  private countKeysInStorage(storage: Storage): number {\n    try {\n      let count = 0;\n      for (let i = 0; i < storage.length; i++) {\n        const key = storage.key(i);\n        if (key?.startsWith(this.API_KEY_PREFIX)) {\n          count++;\n        }\n      }\n      return count;\n    } catch (error) {\n      console.warn('Failed to count keys in storage:', error);\n      return 0;\n    }\n  }\n}\n\n// Export singleton instance\nexport const storageService = new EnhancedStorageService();","// src/services/url-state/url-state-manager.ts\nimport type { URLState, URLStateManager as IURLStateManager } from '@/types/url-state';\nimport { validateURLState } from '@/schemas/llm-schemas';\nimport { URL_STATE_CONFIG } from '@/types/url-state';\n\n/**\n * URL State Manager for saving and loading application state in URL parameters\n * Enables bookmarking and sharing of specific comparison setups\n */\nexport class URLStateManager implements IURLStateManager {\n  public readonly maxURLLength = URL_STATE_CONFIG.maxURLLength;\n  private readonly parameterName = URL_STATE_CONFIG.parameterName;\n\n  /**\n   * Save application state to URL query parameters\n   */\n  public saveStateToURL(state: URLState): void {\n    try {\n      const compressed = this.compressState(state);\n      const params = new URLSearchParams(window.location.search);\n      params.set(this.parameterName, compressed);\n      \n      const newURL = `${window.location.pathname}?${params.toString()}`;\n      \n      // Check URL length limit\n      if (newURL.length <= this.maxURLLength) {\n        window.history.replaceState({}, '', newURL);\n      } else {\n        console.warn(`URL too long (${newURL.length} chars), skipping state save`);\n      }\n    } catch (error) {\n      console.error('Failed to save state to URL:', error);\n    }\n  }\n\n  /**\n   * Load application state from URL query parameters\n   */\n  public loadStateFromURL(): URLState | null {\n    try {\n      const params = new URLSearchParams(window.location.search);\n      const stateParam = params.get(this.parameterName);\n      \n      if (!stateParam) {\n        return null;\n      }\n      \n      const decompressed = this.decompressState(stateParam);\n      const validated = this.validateState(decompressed);\n      \n      return validated;\n    } catch (error) {\n      console.warn('Failed to load state from URL:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Clear URL state parameters\n   */\n  public clearURLState(): void {\n    try {\n      const params = new URLSearchParams(window.location.search);\n      params.delete(this.parameterName);\n      \n      const newURL = params.toString() \n        ? `${window.location.pathname}?${params.toString()}`\n        : window.location.pathname;\n      \n      window.history.replaceState({}, '', newURL);\n    } catch (error) {\n      console.error('Failed to clear URL state:', error);\n    }\n  }\n\n  /**\n   * Get a shareable URL with the current state\n   */\n  public getShareableURL(state: URLState): string {\n    try {\n      const compressed = this.compressState(state);\n      const url = new URL(window.location.href);\n      url.searchParams.set(this.parameterName, compressed);\n      \n      const shareableURL = url.toString();\n      \n      if (shareableURL.length > this.maxURLLength) {\n        throw new Error(`Shareable URL too long (${shareableURL.length} chars)`);\n      }\n      \n      return shareableURL;\n    } catch (error) {\n      console.error('Failed to create shareable URL:', error);\n      // Return current URL as fallback\n      return window.location.href;\n    }\n  }\n\n  /**\n   * Compress state for URL efficiency using base64 encoding\n   */\n  public compressState(state: URLState): string {\n    try {\n      // Create a minimal state object with only non-default values\n      const minimalState = this.createMinimalState(state);\n      \n      // Convert to JSON and compress\n      const json = JSON.stringify(minimalState);\n      const encoded = encodeURIComponent(json);\n      const compressed = btoa(encoded);\n      \n      return compressed;\n    } catch (error) {\n      console.error('Failed to compress state:', error);\n      throw new Error('State compression failed');\n    }\n  }\n\n  /**\n   * Decompress state from URL parameter\n   */\n  public decompressState(compressed: string): URLState {\n    try {\n      const decoded = atob(compressed);\n      const json = decodeURIComponent(decoded);\n      const parsed = JSON.parse(json);\n      \n      // Merge with defaults to ensure complete state\n      return this.mergeWithDefaults(parsed);\n    } catch (error) {\n      console.error('Failed to decompress state:', error);\n      throw new Error('State decompression failed');\n    }\n  }\n\n  /**\n   * Validate state object structure and content\n   */\n  public validateState(state: unknown): URLState | null {\n    try {\n      const validation = validateURLState(state);\n      if (validation.success) {\n        return validation.data;\n      } else {\n        console.warn('Invalid URL state format:', validation.error);\n        return null;\n      }\n    } catch (error) {\n      console.error('State validation failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create minimal state object by removing default values\n   */\n  private createMinimalState(state: URLState): Partial<URLState> {\n    const minimal: Record<string, unknown> = {};\n    \n    // Only include non-empty prompts\n    if (state.prompts.length > 0) {\n      const filteredPrompts = state.prompts.filter(prompt => prompt.trim().length > 0);\n      if (filteredPrompts.length > 0) {\n        minimal['prompts'] = filteredPrompts;\n      }\n    }\n    \n    // Only include non-default config values\n    const config: Record<string, unknown> = {};\n    if (state.config.provider) config['provider'] = state.config.provider;\n    if (state.config.model) config['model'] = state.config.model;\n    if (state.config.temperature !== undefined && state.config.temperature !== 0.7) {\n      config['temperature'] = state.config.temperature;\n    }\n    if (state.config.maxTokens !== undefined && state.config.maxTokens !== 2048) {\n      config['maxTokens'] = state.config.maxTokens;\n    }\n    if (state.config.topP !== undefined && state.config.topP !== 1.0) {\n      config['topP'] = state.config.topP;\n    }\n    if (state.config.frequencyPenalty !== undefined && state.config.frequencyPenalty !== 0.0) {\n      config['frequencyPenalty'] = state.config.frequencyPenalty;\n    }\n    if (state.config.presencePenalty !== undefined && state.config.presencePenalty !== 0.0) {\n      config['presencePenalty'] = state.config.presencePenalty;\n    }\n    if (state.config.systemMessage) {\n      config['systemMessage'] = state.config.systemMessage;\n    }\n    \n    if (Object.keys(config).length > 0) {\n      minimal['config'] = config;\n    }\n    \n    // Only include non-default UI values\n    const ui: Record<string, unknown> = {};\n    if (state.ui.gridColumns !== undefined && state.ui.gridColumns !== 2) {\n      ui['gridColumns'] = state.ui.gridColumns;\n    }\n    if (state.ui.autoSend !== undefined && state.ui.autoSend !== false) {\n      ui['autoSend'] = state.ui.autoSend;\n    }\n    if (state.ui.debounceMs !== undefined && state.ui.debounceMs !== 500) {\n      ui['debounceMs'] = state.ui.debounceMs;\n    }\n    if (state.ui.showAdvancedSettings !== undefined && state.ui.showAdvancedSettings !== false) {\n      ui['showAdvancedSettings'] = state.ui.showAdvancedSettings;\n    }\n    if (state.ui.theme !== undefined && state.ui.theme !== 'system') {\n      ui['theme'] = state.ui.theme;\n    }\n    \n    if (Object.keys(ui).length > 0) {\n      minimal['ui'] = ui;\n    }\n    \n    return minimal as Partial<URLState>;\n  }\n\n  /**\n   * Merge partial state with default values\n   */\n  private mergeWithDefaults(partial: Partial<URLState>): URLState {\n    return {\n      prompts: partial.prompts || [],\n      config: {\n        ...(partial.config?.provider && { provider: partial.config.provider }),\n        ...(partial.config?.model && { model: partial.config.model }),\n        ...(partial.config?.temperature !== undefined && { temperature: partial.config.temperature }),\n        ...(partial.config?.maxTokens !== undefined && { maxTokens: partial.config.maxTokens }),\n        ...(partial.config?.topP !== undefined && { topP: partial.config.topP }),\n        ...(partial.config?.frequencyPenalty !== undefined && { frequencyPenalty: partial.config.frequencyPenalty }),\n        ...(partial.config?.presencePenalty !== undefined && { presencePenalty: partial.config.presencePenalty }),\n        ...(partial.config?.systemMessage && { systemMessage: partial.config.systemMessage }),\n      },\n      ui: {\n        ...(partial.ui?.gridColumns !== undefined && { gridColumns: partial.ui.gridColumns }),\n        ...(partial.ui?.autoSend !== undefined && { autoSend: partial.ui.autoSend }),\n        ...(partial.ui?.debounceMs !== undefined && { debounceMs: partial.ui.debounceMs }),\n        ...(partial.ui?.showAdvancedSettings !== undefined && { showAdvancedSettings: partial.ui.showAdvancedSettings }),\n        ...(partial.ui?.theme && { theme: partial.ui.theme }),\n      },\n    };\n  }\n\n  /**\n   * Check if current URL has state parameters\n   */\n  public hasURLState(): boolean {\n    const params = new URLSearchParams(window.location.search);\n    return params.has(this.parameterName);\n  }\n\n  /**\n   * Get URL state parameter size in bytes\n   */\n  public getStateSize(): number {\n    const params = new URLSearchParams(window.location.search);\n    const stateParam = params.get(this.parameterName);\n    return stateParam ? new Blob([stateParam]).size : 0;\n  }\n\n  /**\n   * Estimate compressed size of a state object\n   */\n  public estimateStateSize(state: URLState): number {\n    try {\n      const compressed = this.compressState(state);\n      return new Blob([compressed]).size;\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a state object would fit in URL\n   */\n  public canFitInURL(state: URLState): boolean {\n    try {\n      const shareableURL = this.getShareableURL(state);\n      return shareableURL.length <= this.maxURLLength;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const urlStateManager = new URLStateManager();"],"names":["DEFAULT_UI_STATE","gridColumns","autoSend","debounceMs","showAdvancedSettings","theme","URL_STATE_CONFIG","storageService","constructor","__publicField","this","Map","getStoragePreference","stored","localStorage","getItem","PREFERENCE_KEY","parsed","JSON","parse","validation","validateStoragePreference","success","data","error","type","acknowledgedRisks","setStoragePreference","preference","Error","message","setItem","stringify","clearSessionStorage","clearLocalStorage","saveAPIKey","provider","key","trim","length","storageKey","getStorageKey","clearAPIKeyFromAllStorageTypes","inMemoryKeys","set","sessionStorage","sessionError","getAPIKey","get","clearAPIKey","clearAllAPIKeys","clear","getStoredProviders","providers","allProviders","push","hasStoredKeys","getStorageStats","memoryKeys","size","sessionKeys","countKeysInStorage","localKeys","API_KEY_PREFIX","delete","removeItem","keysToRemove","i","startsWith","forEach","storage","count","urlStateManager","saveStateToURL","state","compressed","compressState","params","URLSearchParams","window","location","search","parameterName","newURL","pathname","toString","maxURLLength","history","replaceState","loadStateFromURL","stateParam","decompressed","decompressState","validateState","clearURLState","getShareableURL","url","URL","href","searchParams","shareableURL","minimalState","createMinimalState","json","encoded","encodeURIComponent","btoa","decoded","atob","decodeURIComponent","mergeWithDefaults","validateURLState","minimal","prompts","filteredPrompts","filter","prompt","config","model","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemMessage","Object","keys","ui","partial","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","hasURLState","has","getStateSize","Blob","estimateStateSize","canFitInURL"],"mappings":"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"}